server:
  port: 7002
  ssl:
    enabled: false

mhc:
  enabled: true
  accounts:
    - name: name1
      address: address1
      username: user1
      password: pwd1
    - name: name2
      address: address2
      username: user2
      password: pwd2

redis:
  connection: redis://109.105.30.176:6379
  scheduler: default
  parallelism: -1

services:
  front50:
    baseUrl: http://services.gcloud.srcb.com:25078

management.health.elasticsearch.enabled: false

swagger:
  enabled: true
  title: clouddriver
  description: Cloud read and write operations
  contact: admin@host.net
  patterns:
    - .*elasticIps.*
    - .*cache.*
    - .*instance.*
    - .*search.*
    - .*security.*
    - .*vpcs.*
    - .*credentials.*
    - .*networks.*
    - .*subnets.*
    - .*ops.*
    - .*task.*
    - .*applications.*
    - .*kubernetes.*
    - .*instances.*
    - .*reports.*
    - .*docker.*
    - .*job.*
    - .*process.*
    - .*ceres.*
    - .*test.*
    - .*config.*

default:
  # legacyServerPort is a non-ssl listener, if ssl is enabled. -1 to disable
  legacyServerPort: -1
  account:
    env: default

ceres:
  enabled: false
  accounts:
    - name: srcb
      password: srcb@2018
      authRealm: ceres
      authClientId: shovel
      authClientSecret: 0bca9a77-5b77-4fb5-9bd4-02d07a93ea3f
      authUrl: https://auth.cerescloud.io

      regions:
        - name: kr
          endpoint: https://api-kr.cerescloud.io
          loadBalancingEnabled: true
          apiVersion: v1.5
          #if loadBalancingEnabled is true
          loadbalancerDNS:
            name: dns_consul
            endpoint: 148.78.21.12:443
            token: 5cc6109c-8bd4-11e7-a074-08002775d285

        #- name: bd
        #  endpoint: https://api-bd.cerescloud.io
        #  loadBalancingEnabled: true
        #  apiVersion: v1.5

dockerRegistry:
  enabled: ${DOCKER_REGISTRY_ENABLED:false}
  accounts:
    - name: dockerhub
      address: https://registry.bst-1.cns.bstjpc.com:5000
      insecureRegistry: true
      repositories:
        - library/ubuntu
        - cloudpi/potal-frontend
        - cloudpi/potal-backend
        - cloudpi/huangtian

spring:
  jackson:
    mapper:
      SORT_PROPERTIES_ALPHABETICALLY: true
    serialization:
      ORDER_MAP_ENTRIES_BY_KEYS: true

operations.security:
  onMissingSecuredCheck: WARN
  onMissingValidator: WARN

# Turn on when confirming Fiat authorization checks
# logging.level.com.netflix.spinnaker.clouddriver.listeners: DEBUG

---

spring:
  profiles: prod

# example https configuration for client auth to services:
#default:
  # legacyServerPort is a non-ssl listener when the main listener has SSL enabled
  #legacyServerPort: 8501

#server:
  #ssl:
    # enabled: true
    # keyStore: clouddriver-keystore.p12
    # keyStoreType: PKCS12
    # keyStorePassword: changeme
    # trustStore: services-truststore.p12
    # trustStoreType: PKCS12
    # trustStorePassword: changeme
    # clientAuth: need

#aws:
  # example configuration for managing multiple accounts
  # role in managed account to assume:
  #defaultAssumeRole: role/myrole
  #accounts:
    # - name: account-display-name
    #   defaultKeyPair: key-pair
    #   edda: http://edda.{{region}}.host.net:7001
    #   discovery: "http://{{region}}.discovery.host.net:7001/eureka"
    #   accountId: 123456789012
    #   regions: #override default regions
    #     - name: us-east-1
    #     - name: ap-northeast-1

---

# local profile is activated by default when running the application - override values here for local development
#  for production, set spring.profiles.active to select the appropriate profile for your environment
spring:
  profiles: local

# an AWSCredentialsProvider that obtains session credentials via SSH through a bastion instance (useful for local development):
#bastion:
#  enabled: false
#  port: 22
#  proxyRegion: us-west-1
#  proxyCluster: my-credentials-cluster